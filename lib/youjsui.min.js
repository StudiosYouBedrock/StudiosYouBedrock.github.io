(function () {
  async function Fetch(u) {
    return await (await fetch(`./${u}`)).json();
  }
  let inc = (a, s) => a.includes(s);
  function Id(a) {
    return document.getElementById(a);
  }
  // return  name ,obj
  function getvalue(obj, nm) {
    nm = Object.keys(obj).find((a) => a.startsWith(nm));
    if (obj[nm] ?? !1) {
      return { nm, obj: obj[nm] };
    } else {
      return !1;
    }
  }
  // return a[0],b[1]
  function splitpoint(obj) {
    if (inc(obj, ".")) {
      obj = obj.split(".");
      return obj[0] && obj[1] ? obj : !1;
    }
  }
  // return namespace[0],name[1]
  function oninh(obj) {
    if (obj !== undefined) {
      if (inc(obj, "@")) {
        obj = obj.split("@")[1];
        return splitpoint(obj);
      } else {
        return !1;
      }
    }
  }
  // return inh[0/1 or false], obj
  function onread(obj, nm) {
    let v = getvalue(obj, nm),
      inh = oninh(v.nm);
    return {
      inh,
      obj: v.obj || !1,
    };
  }
  // obt urls && return tourfiles
  async function tourdefs(nsp, nm) {
    let defs = await Fetch("ui/_ui_defs.json");
    return defs.map((a) => {
      return tourfiles(a, nsp, nm);
    });
  }
  // return obj
  async function tourfiles(url, nsp, nm) {
    let file = await Fetch(url);
    if (nsp == file.namespace) {
      let obj = onread(file, nm),
        vl = obj.obj,
        inh = obj.inh,
        cts = obj.obj.controls;

      if (cts) {
        tourcontrols(cts);
      }
      if (inh) {
        let newinh = await tourdefs(inh[0], inh[1]);
        obj = await legacyfile(vl, newinh);
      }
      return obj;
    }
  }
  // tourcontrols inh the tourfiles
  async function tourcontrols(cts) {
    cts.forEach(async (e) => {
      let nm = Object.keys(e)[0],
        ns = oninh(nm);
      if (ns !== !1) {
        let inh = await tourdefs(ns[0], ns[1]);
        await legacyfile(e[nm], inh);
      }
    });
  }
  // inh return {obj}
  async function legacyfile(obj, inh) {
    inh = await inh[0];
    obj.__proto__ = inh.obj;

    let iclss = inh.obj.onclass,
      icts = inh.obj.controls,
      clss = obj.onclass,
      cts = obj.controls;

    if (iclss) {
      iclss.forEach((e) => {
        clss.unshift(e);
      });
    }

    if (icts) {
      icts.forEach((e) => {
        cts.unshift(e);
      });
    }

    return { obj };
  }
  // obj to html
  function sethtml(a) {
    let elem = document.createElement(a.type);
    let clss = a.onclass,
      id = a.onid,
      cts = a.controls,
      tx = a.ontext,
      lang = a.onlang,
      src = a.onsrc,
      href = a.onhref,
      type = a.ontype,
      rel = a.onrel;

    if (clss) {
      clss.forEach((e) => {
        elem.classList.add(e);
      });
    }

    if (id) {
      elem.id = id;
    }
    if (tx) {
      elem.innerText = tx;
    }
    if (lang) {
      elem.setAttribute("onlang", lang);
      langone(elem);
    }
    if (src) {
      elem.src = src;
    }
    if (href) {
      elem.href = href;
    }
    if (type) {
      elem.type = type;
    }
    if (rel) {
      elem.rel = rel;
    }
    if (cts) {
      cts.forEach((e) => {
        e = sethtml(e[Object.keys(e)[0]]);
        elem.append(e);
      });
    }
    return elem;
  }
  async function ui_obj(nm) {
    nm = splitpoint(nm);
    nm = await tourdefs(nm[0], nm[1]);
    return await nm[0];
  }
  function vars(obj) {
    let vl = [],
      jsn;
    for (const x in obj) {
      if (x.startsWith("$")) {
        vl.push({ name: x.slice(1), vl: obj[x] });
      }
    }
    vl = { vl, obj };
    for (const x in vl.obj) {
      if (x.startsWith("$")) {
        delete vl.obj[x];
      }
    }
    jsn = JSON.stringify(vl.obj);
    vl.vl.forEach((e) => {
      jsn = jsn.replace(/\$/g, "");
      jsn = jsn.replace(RegExp(`"${e.name}"`, "g"), `"${e.vl}"`);
    });
    return JSON.parse(jsn);
  }
  async function ui_start() {
    let init = await Fetch("ui/_init_ui.json");
    init.init.forEach((e) => {
      set_ui(Object.keys(e)[0], "app");
    });
  }
  async function ui_init(nm, dts) {
    nm = await ui_obj(nm);
    if (dts) {
      for (const x in dts) {
        if (x.startsWith("$")) {
          nm.obj[x] = dts[x];
        }
      }
    }
    nm = vars(nm.obj);
    nm = sethtml(nm);
    return nm;
  }
  async function ui_apd(dt, apd) {
    Id(apd).append(await dt);
  }
  async function set_ui(nm, apd, dts) {
    nm = await ui_obj(nm);
    if (dts) {
      for (const x in dts) {
        if (x.startsWith("$")) {
          nm.obj[x] = dts[x];
        }
      }
    }
    nm = vars(nm.obj);
    nm = sethtml(nm);
    Id(apd).append(nm);
  }
  async function ui_scripts() {
    let scr = await Fetch("scripts.json");
    scr.scripts.forEach((e) => {
      scr = {
        type: "script",
        onsrc: e.url || "",
        ontype: e.type || "",
      };
      scr = sethtml(scr);
      if (e.att) {
        e.att.forEach((a) => {
          scr.setAttribute(a, "");
        });
      }

      document.head.append(scr);
    });
  }
  async function ui_fonts() {
    let fonts = await Fetch("fonts.json");
    fonts.fonts.forEach(async (e) => {
      let fts = new FontFace(e.name, `url(${e.url})`);
      await fts.load();
      document.fonts.add(fts);
      Id("app").style.visibility = "visible";
    });
  }
  async function ui_css() {
    let css = await Fetch("css.json");
    css.css.forEach(async (e) => {
      css = {
        type: "link",
        onhref: e.url,
        onrel: "stylesheet",
      };
      css = sethtml(css);
      document.head.append(css);
    });
  }

  async function lang_exist(list, lgn) {
    let file;
    if (list[lgn]) {
      try {
        file = await Fetch(list[lgn]);
      } catch {
        file = "";
        console.warn(`The url "${list[lgn]}" does not exist`);
      }
    } else if (list["en"]) {
      try {
        file = await Fetch(list["en"]);
      } catch {
        file = "";
        console.warn(`The url "${list["en"]}" does not exist`);
      }
    } else {
      console.warn("No language file exists");
    }
    return file;
  }
  async function langall() {
    console.clear();
    let lgn = (navigator.language || navigator.userLanguage).split("-")[0];
    let list = await Fetch("lang/lang_list.json");
    let file = await lang_exist(list, lgn);

    document.querySelectorAll("[onlang]").forEach((e) => {
      console.log(e);
      let key = e.getAttribute("onlang");
      e.innerText = file[key] || key;
    });
  }
  async function langone(e) {
    let lgn = (navigator.language || navigator.userLanguage).split("-")[0];
    let list = await Fetch("lang/lang_list.json");
    let file = await lang_exist(list, lgn);
    let key = e.getAttribute("onlang");
    e.innerText = file[key] || key;
  }

  ui_fonts();
  ui_css();
  ui_start();
  ui_scripts();
  langall();
  window.ui_init = ui_init;
  window.ui_apd = ui_apd;
  window.set_ui = set_ui;
})();
